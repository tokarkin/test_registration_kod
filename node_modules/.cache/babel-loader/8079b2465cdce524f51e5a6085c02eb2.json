{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _messages = _interopRequireDefault(require(\"./messages\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DEFAULT_OPTIONS = {\n  memoize: true,\n  allowBlank: false,\n  urlProtocols: ['http', 'https'],\n  dateFormat: 'yyyy-mm-dd',\n  // ISO\n  dateYmd: 'ymd',\n  accept: ['1', 'true'],\n  caseSensitive: true // confirmation, inclusion, exclusion\n\n};\nvar Validators = {\n  formatMessage: formatMessage,\n  formatSize: formatSize,\n  defaultOptions: DEFAULT_OPTIONS,\n  messages: _messages[\"default\"],\n  pluralRules: {\n    0: 'zero',\n    1: 'one'\n  }\n};\nvar _default = Validators;\nexports[\"default\"] = _default;\n\nfunction formatSize(size, unit) {\n  return size + ' ' + unit;\n}\n\nfunction formatMessage(msg) {\n  if (msg.props) {\n    msg = msg.props;\n  }\n\n  var text = msg.defaultMessage || msg.id ||\n  /* istanbul ignore next */\n  '';\n  var rules = Validators.pluralRules;\n  return !msg.values ? text : parseMsg(text, function (part) {\n    var parts = part.split(',');\n    var count = msg.values[parts[0]]; // {value} OR {count, number}\n\n    if (parts.length <= 2) {\n      return count == null ? '' : '' + count;\n    } // plural\n\n\n    var plural = parts.slice(2).join(',').trim();\n    var info = {};\n    var result = parseMsg(plural, null, rules[+count] || 'other', info);\n    return info.found ? result : parseMsg(plural, null, 'other', {});\n  });\n}\n\nfunction parseMsg(msg, func, pattern, info) {\n  var start = msg.indexOf('{');\n  if (start < 0) return pattern ? '' : msg;\n  var index = start;\n  var count = 1;\n  var len = msg.length;\n\n  while (count > 0 && index < len) {\n    ++index;\n\n    if (msg.charAt(index) === '{') {\n      ++count;\n    }\n\n    if (msg.charAt(index) === '}') {\n      --count;\n    }\n  }\n\n  if (pattern) {\n    if (pattern === msg.slice(0, start).trim()) {\n      info.found = true;\n      return msg.slice(start + 1, index).trim();\n    }\n\n    return parseMsg(msg.slice(index + 1), null, pattern, info);\n  } // func gets all '{.*}' parts\n  // e.g:\n  // - {count}\n  // - {count, plural, one {1 thing} other {many things}}\n  // - ...\n\n\n  return msg.slice(0, start) + parseMsg(func(msg.slice(start + 1, index).trim()), func) + parseMsg(msg.slice(index + 1), func);\n}","map":{"version":3,"sources":["C:/Users/dimak/Desktop/courses/node_modules/redux-form-validators/lib/validators.js"],"names":["Object","defineProperty","exports","value","_messages","_interopRequireDefault","require","obj","__esModule","DEFAULT_OPTIONS","memoize","allowBlank","urlProtocols","dateFormat","dateYmd","accept","caseSensitive","Validators","formatMessage","formatSize","defaultOptions","messages","pluralRules","_default","size","unit","msg","props","text","defaultMessage","id","rules","values","parseMsg","part","parts","split","count","length","plural","slice","join","trim","info","result","found","func","pattern","start","indexOf","index","len","charAt"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _messages = _interopRequireDefault(require(\"./messages\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar DEFAULT_OPTIONS = {\n  memoize: true,\n  allowBlank: false,\n  urlProtocols: ['http', 'https'],\n  dateFormat: 'yyyy-mm-dd',\n  // ISO\n  dateYmd: 'ymd',\n  accept: ['1', 'true'],\n  caseSensitive: true // confirmation, inclusion, exclusion\n\n};\nvar Validators = {\n  formatMessage: formatMessage,\n  formatSize: formatSize,\n  defaultOptions: DEFAULT_OPTIONS,\n  messages: _messages[\"default\"],\n  pluralRules: {\n    0: 'zero',\n    1: 'one'\n  }\n};\nvar _default = Validators;\nexports[\"default\"] = _default;\n\nfunction formatSize(size, unit) {\n  return size + ' ' + unit;\n}\n\nfunction formatMessage(msg) {\n  if (msg.props) {\n    msg = msg.props;\n  }\n\n  var text = msg.defaultMessage || msg.id ||\n  /* istanbul ignore next */\n  '';\n  var rules = Validators.pluralRules;\n  return !msg.values ? text : parseMsg(text, function (part) {\n    var parts = part.split(',');\n    var count = msg.values[parts[0]]; // {value} OR {count, number}\n\n    if (parts.length <= 2) {\n      return count == null ? '' : '' + count;\n    } // plural\n\n\n    var plural = parts.slice(2).join(',').trim();\n    var info = {};\n    var result = parseMsg(plural, null, rules[+count] || 'other', info);\n    return info.found ? result : parseMsg(plural, null, 'other', {});\n  });\n}\n\nfunction parseMsg(msg, func, pattern, info) {\n  var start = msg.indexOf('{');\n  if (start < 0) return pattern ? '' : msg;\n  var index = start;\n  var count = 1;\n  var len = msg.length;\n\n  while (count > 0 && index < len) {\n    ++index;\n\n    if (msg.charAt(index) === '{') {\n      ++count;\n    }\n\n    if (msg.charAt(index) === '}') {\n      --count;\n    }\n  }\n\n  if (pattern) {\n    if (pattern === msg.slice(0, start).trim()) {\n      info.found = true;\n      return msg.slice(start + 1, index).trim();\n    }\n\n    return parseMsg(msg.slice(index + 1), null, pattern, info);\n  } // func gets all '{.*}' parts\n  // e.g:\n  // - {count}\n  // - {count, plural, one {1 thing} other {many things}}\n  // - ...\n\n\n  return msg.slice(0, start) + parseMsg(func(msg.slice(start + 1, index).trim()), func) + parseMsg(msg.slice(index + 1), func);\n}"]},"metadata":{},"sourceType":"script"}